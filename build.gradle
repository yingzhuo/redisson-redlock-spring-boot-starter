plugins {
	id 'java'
	id 'signing'
	id 'maven-publish'
	id 'io.spring.dependency-management'
}

allprojects {
	group = 'com.github.yingzhuo'
	version = '3.45.1'
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
	}
}

dependencies {
	// spring-boot & spring
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'org.springframework.boot:spring-boot-autoconfigure'
	compileOnly 'org.springframework.boot:spring-boot-starter-aop'
	compileOnly 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.springframework.boot:spring-boot-starter-logging'
	compileOnly 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.springframework.boot:spring-boot-starter-jdbc'
	compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
	compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
	compileOnly 'org.springframework.boot:spring-boot-autoconfigure-processor'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// redisson
	implementation 'org.redisson:redisson:3.45.1'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// slf4j
	implementation 'org.slf4j:slf4j-api'
}

java {
	withSourcesJar()
	withJavadocJar()

	sourceCompatibility = JavaVersion.toVersion("$javaVersion")
	targetCompatibility = JavaVersion.toVersion("$javaVersion")

	toolchain {
		languageVersion = JavaLanguageVersion.of("$javaVersion")
	}
}

sourcesJar {
}

jar {
	manifest {
		attributes([
			'Module-Name'           : "${project.name}",
			'Implementation-Version': "${project.version}"
		])
	}
}

javadoc {
	options.addBooleanOption("html5", true)
	options.addBooleanOption("Xdoclint:none", true)
}

test {
	useJUnitPlatform()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			groupId = "${project.group}"
			artifactId = 'redisson-redlock-spring-boot-starter'
			version = "${project.version}"

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}

			pom {
				name = 'redisson-redlock-spring-boot-starter'
				description = 'spring-boot starter for redisson RedLock/MultiLock'
				url = 'https://github.com/yingzhuo/redisson-redlock-spring-boot-starter'
				inceptionYear = '2025'

				licenses {
					license {
						name = 'Apache License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'yingzhuo'
						name = '应卓'
						email = 'yingzhor@gmail.com'
						roles = ['author']
						url = 'https://github.com/yingzhuo'
					}
				}

				scm {
					url = 'git@github.com:yingzhuo/redisson-redlock-spring-boot-starter.git'
					connection = 'scm:git:git@github.com:yingzhuo/redisson-redlock-spring-boot-starter.git'
					developerConnection = 'scm:git:git@github.com:yingzhuo/redisson-redlock-spring-boot-starter.git'
				}
			}
		}
	}

	repositories {
		maven {
			name = 'OSSRH'
			url = rootProject.version.endsWith('SNAPSHOT') ? "${ossrhSnapshotUrl}" : "${ossrhReleaseUrl}"

			credentials {
				// 私密信息在 $GRADLE_USER_HOME/gradle.properties
				username = getPropertyOrEmpty('ossrhTokenUsername')
				password = getPropertyOrEmpty('ossrhTokenPassword')
			}
		}
	}
}

signing {
	useGpgCmd()
	sign publishing.publications.mavenJava
}

tasks.withType(GenerateModuleMetadata).configureEach {
	enabled = false
}

tasks.named('wrapper') { task ->
	// 国内镜像两个比较好的选择
	// (1) 腾讯云: https://mirrors.cloud.tencent.com/gradle/gradle-${gradleVersion}-bin.zip
	// (2) 华为云: https://mirrors.huaweicloud.com/gradle/gradle-${gradleVersion}-bin.zip
	distributionUrl = "https://mirrors.cloud.tencent.com/gradle/gradle-${gradleVersion}-bin.zip"
}

// ---------------------------------------------------------------------------------------------------------------------

private String getPropertyOrEmpty(String propertyName) {
	try {
		var value = getProperty(propertyName).toString()
		return value.trim()
	} catch (MissingPropertyException ignored) {
		return ''
	}
}
